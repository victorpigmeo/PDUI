// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "pdui-proto-out.proto" (package "PDUI", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message PDUI.PBScaffold
 */
export interface PBScaffold {
    /**
     * @generated from protobuf field: PDUI.PBExpression appBar = 1
     */
    appBar?: PBExpression;
    /**
     * @generated from protobuf field: PDUI.PBExpression body = 2
     */
    body?: PBExpression;
}
/**
 * @generated from protobuf message PDUI.PBAppBar
 */
export interface PBAppBar {
    /**
     * @generated from protobuf field: string backgroundColor = 1
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: string title = 2
     */
    title: string;
}
/**
 * @generated from protobuf message PDUI.PBCenter
 */
export interface PBCenter {
    /**
     * @generated from protobuf field: PDUI.PBExpression child = 1
     */
    child?: PBExpression;
}
/**
 * @generated from protobuf message PDUI.PBText
 */
export interface PBText {
    /**
     * @generated from protobuf field: string data = 1
     */
    data: string;
}
/**
 * @generated from protobuf message PDUI.PBColumn
 */
export interface PBColumn {
    /**
     * @generated from protobuf field: repeated PDUI.PBExpression children = 1
     */
    children: PBExpression[];
}
/**
 * @generated from protobuf message PDUI.PBElevatedButton
 */
export interface PBElevatedButton {
    /**
     * @generated from protobuf field: PDUI.PBExpression child = 1
     */
    child?: PBExpression;
    /**
     * @generated from protobuf field: PDUI.PBFnExpression onPressed = 2
     */
    onPressed?: PBFnExpression;
}
/**
 * @generated from protobuf message PDUI.PBFnParameter
 */
export interface PBFnParameter {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: PDUI.PBDataType type = 2
     */
    type: PBDataType;
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "stringValue";
        /**
         * @generated from protobuf field: string stringValue = 3
         */
        stringValue: string;
    } | {
        oneofKind: "intValue";
        /**
         * @generated from protobuf field: int32 intValue = 4
         */
        intValue: number;
    } | {
        oneofKind: "floatValue";
        /**
         * @generated from protobuf field: float floatValue = 5
         */
        floatValue: number;
    } | {
        oneofKind: "booleanValue";
        /**
         * @generated from protobuf field: bool booleanValue = 6
         */
        booleanValue: boolean;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PDUI.PBFn
 */
export interface PBFn {
    /**
     * @generated from protobuf field: optional string name = 1
     */
    name?: string;
    /**
     * @generated from protobuf field: map<string, PDUI.PBFnParameter> params = 2
     */
    params: {
        [key: string]: PBFnParameter;
    };
    /**
     * @generated from protobuf field: map<string, PDUI.PBFnExpression> body = 3
     */
    body: {
        [key: string]: PBFnExpression;
    };
}
/**
 * @generated from protobuf message PDUI.PBDebugPrint
 */
export interface PBDebugPrint {
    /**
     * @generated from protobuf field: PDUI.PBExpression expression = 1
     */
    expression?: PBExpression;
}
/**
 * @generated from protobuf message PDUI.PBNavigation
 */
export interface PBNavigation {
    /**
     * @generated from protobuf field: string expressionId = 1
     */
    expressionId: string; // TODO: Support data on navigation
}
/**
 * TODO: Support data on pop
 *
 * @generated from protobuf message PDUI.PBPopNavigation
 */
export interface PBPopNavigation {
}
/**
 * @generated from protobuf message PDUI.PBFnExpression
 */
export interface PBFnExpression {
    /**
     * @generated from protobuf field: string identity = 1
     */
    identity: string;
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "genericFn";
        /**
         * @generated from protobuf field: PDUI.PBFn genericFn = 2
         */
        genericFn: PBFn;
    } | {
        oneofKind: "debugPrint";
        /**
         * @generated from protobuf field: PDUI.PBDebugPrint debugPrint = 3
         */
        debugPrint: PBDebugPrint;
    } | {
        oneofKind: "navigation";
        /**
         * @generated from protobuf field: PDUI.PBNavigation navigation = 4
         */
        navigation: PBNavigation;
    } | {
        oneofKind: "popNavigation";
        /**
         * @generated from protobuf field: PDUI.PBPopNavigation popNavigation = 5
         */
        popNavigation: PBPopNavigation;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PDUI.PBExpression
 */
export interface PBExpression {
    /**
     * @generated from protobuf field: optional string key = 1
     */
    key?: string;
    /**
     * @generated from protobuf field: string identity = 2
     */
    identity: string;
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "rawString";
        /**
         * @generated from protobuf field: string rawString = 3
         */
        rawString: string;
    } | {
        oneofKind: "scaffold";
        /**
         * @generated from protobuf field: PDUI.PBScaffold scaffold = 4
         */
        scaffold: PBScaffold;
    } | {
        oneofKind: "center";
        /**
         * @generated from protobuf field: PDUI.PBCenter center = 5
         */
        center: PBCenter;
    } | {
        oneofKind: "text";
        /**
         * @generated from protobuf field: PDUI.PBText text = 6
         */
        text: PBText;
    } | {
        oneofKind: "appBar";
        /**
         * @generated from protobuf field: PDUI.PBAppBar appBar = 7
         */
        appBar: PBAppBar;
    } | {
        oneofKind: "column";
        /**
         * @generated from protobuf field: PDUI.PBColumn column = 8
         */
        column: PBColumn;
    } | {
        oneofKind: "elevatedButton";
        /**
         * @generated from protobuf field: PDUI.PBElevatedButton elevatedButton = 9
         */
        elevatedButton: PBElevatedButton;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum PDUI.PBDataType
 */
export enum PBDataType {
    /**
     * @generated from protobuf enum value: STRING = 0;
     */
    STRING = 0,
    /**
     * @generated from protobuf enum value: INT = 1;
     */
    INT = 1,
    /**
     * @generated from protobuf enum value: FLOAT = 2;
     */
    FLOAT = 2,
    /**
     * @generated from protobuf enum value: BOOLEAN = 3;
     */
    BOOLEAN = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class PBScaffold$Type extends MessageType<PBScaffold> {
    constructor() {
        super("PDUI.PBScaffold", [
            { no: 1, name: "appBar", kind: "message", T: () => PBExpression },
            { no: 2, name: "body", kind: "message", T: () => PBExpression }
        ]);
    }
    create(value?: PartialMessage<PBScaffold>): PBScaffold {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PBScaffold>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBScaffold): PBScaffold {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PDUI.PBExpression appBar */ 1:
                    message.appBar = PBExpression.internalBinaryRead(reader, reader.uint32(), options, message.appBar);
                    break;
                case /* PDUI.PBExpression body */ 2:
                    message.body = PBExpression.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBScaffold, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PDUI.PBExpression appBar = 1; */
        if (message.appBar)
            PBExpression.internalBinaryWrite(message.appBar, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PDUI.PBExpression body = 2; */
        if (message.body)
            PBExpression.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBScaffold
 */
export const PBScaffold = new PBScaffold$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBAppBar$Type extends MessageType<PBAppBar> {
    constructor() {
        super("PDUI.PBAppBar", [
            { no: 1, name: "backgroundColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PBAppBar>): PBAppBar {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.backgroundColor = "";
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<PBAppBar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBAppBar): PBAppBar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string backgroundColor */ 1:
                    message.backgroundColor = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBAppBar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string backgroundColor = 1; */
        if (message.backgroundColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.backgroundColor);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBAppBar
 */
export const PBAppBar = new PBAppBar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBCenter$Type extends MessageType<PBCenter> {
    constructor() {
        super("PDUI.PBCenter", [
            { no: 1, name: "child", kind: "message", T: () => PBExpression }
        ]);
    }
    create(value?: PartialMessage<PBCenter>): PBCenter {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PBCenter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBCenter): PBCenter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PDUI.PBExpression child */ 1:
                    message.child = PBExpression.internalBinaryRead(reader, reader.uint32(), options, message.child);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBCenter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PDUI.PBExpression child = 1; */
        if (message.child)
            PBExpression.internalBinaryWrite(message.child, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBCenter
 */
export const PBCenter = new PBCenter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBText$Type extends MessageType<PBText> {
    constructor() {
        super("PDUI.PBText", [
            { no: 1, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PBText>): PBText {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = "";
        if (value !== undefined)
            reflectionMergePartial<PBText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBText): PBText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string data */ 1:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string data = 1; */
        if (message.data !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBText
 */
export const PBText = new PBText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBColumn$Type extends MessageType<PBColumn> {
    constructor() {
        super("PDUI.PBColumn", [
            { no: 1, name: "children", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PBExpression }
        ]);
    }
    create(value?: PartialMessage<PBColumn>): PBColumn {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.children = [];
        if (value !== undefined)
            reflectionMergePartial<PBColumn>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBColumn): PBColumn {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PDUI.PBExpression children */ 1:
                    message.children.push(PBExpression.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBColumn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PDUI.PBExpression children = 1; */
        for (let i = 0; i < message.children.length; i++)
            PBExpression.internalBinaryWrite(message.children[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBColumn
 */
export const PBColumn = new PBColumn$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBElevatedButton$Type extends MessageType<PBElevatedButton> {
    constructor() {
        super("PDUI.PBElevatedButton", [
            { no: 1, name: "child", kind: "message", T: () => PBExpression },
            { no: 2, name: "onPressed", kind: "message", T: () => PBFnExpression }
        ]);
    }
    create(value?: PartialMessage<PBElevatedButton>): PBElevatedButton {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PBElevatedButton>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBElevatedButton): PBElevatedButton {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PDUI.PBExpression child */ 1:
                    message.child = PBExpression.internalBinaryRead(reader, reader.uint32(), options, message.child);
                    break;
                case /* PDUI.PBFnExpression onPressed */ 2:
                    message.onPressed = PBFnExpression.internalBinaryRead(reader, reader.uint32(), options, message.onPressed);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBElevatedButton, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PDUI.PBExpression child = 1; */
        if (message.child)
            PBExpression.internalBinaryWrite(message.child, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PDUI.PBFnExpression onPressed = 2; */
        if (message.onPressed)
            PBFnExpression.internalBinaryWrite(message.onPressed, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBElevatedButton
 */
export const PBElevatedButton = new PBElevatedButton$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBFnParameter$Type extends MessageType<PBFnParameter> {
    constructor() {
        super("PDUI.PBFnParameter", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["PDUI.PBDataType", PBDataType] },
            { no: 3, name: "stringValue", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "intValue", kind: "scalar", oneof: "value", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "floatValue", kind: "scalar", oneof: "value", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "booleanValue", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PBFnParameter>): PBFnParameter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.type = 0;
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PBFnParameter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBFnParameter): PBFnParameter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* PDUI.PBDataType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string stringValue */ 3:
                    message.value = {
                        oneofKind: "stringValue",
                        stringValue: reader.string()
                    };
                    break;
                case /* int32 intValue */ 4:
                    message.value = {
                        oneofKind: "intValue",
                        intValue: reader.int32()
                    };
                    break;
                case /* float floatValue */ 5:
                    message.value = {
                        oneofKind: "floatValue",
                        floatValue: reader.float()
                    };
                    break;
                case /* bool booleanValue */ 6:
                    message.value = {
                        oneofKind: "booleanValue",
                        booleanValue: reader.bool()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBFnParameter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* PDUI.PBDataType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string stringValue = 3; */
        if (message.value.oneofKind === "stringValue")
            writer.tag(3, WireType.LengthDelimited).string(message.value.stringValue);
        /* int32 intValue = 4; */
        if (message.value.oneofKind === "intValue")
            writer.tag(4, WireType.Varint).int32(message.value.intValue);
        /* float floatValue = 5; */
        if (message.value.oneofKind === "floatValue")
            writer.tag(5, WireType.Bit32).float(message.value.floatValue);
        /* bool booleanValue = 6; */
        if (message.value.oneofKind === "booleanValue")
            writer.tag(6, WireType.Varint).bool(message.value.booleanValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBFnParameter
 */
export const PBFnParameter = new PBFnParameter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBFn$Type extends MessageType<PBFn> {
    constructor() {
        super("PDUI.PBFn", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => PBFnParameter } },
            { no: 3, name: "body", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => PBFnExpression } }
        ]);
    }
    create(value?: PartialMessage<PBFn>): PBFn {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.params = {};
        message.body = {};
        if (value !== undefined)
            reflectionMergePartial<PBFn>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBFn): PBFn {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* map<string, PDUI.PBFnParameter> params */ 2:
                    this.binaryReadMap2(message.params, reader, options);
                    break;
                case /* map<string, PDUI.PBFnExpression> body */ 3:
                    this.binaryReadMap3(message.body, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: PBFn["params"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PBFn["params"] | undefined, val: PBFn["params"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = PBFnParameter.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for PDUI.PBFn.params");
            }
        }
        map[key ?? ""] = val ?? PBFnParameter.create();
    }
    private binaryReadMap3(map: PBFn["body"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PBFn["body"] | undefined, val: PBFn["body"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = PBFnExpression.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for PDUI.PBFn.body");
            }
        }
        map[key ?? ""] = val ?? PBFnExpression.create();
    }
    internalBinaryWrite(message: PBFn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* map<string, PDUI.PBFnParameter> params = 2; */
        for (let k of globalThis.Object.keys(message.params)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            PBFnParameter.internalBinaryWrite(message.params[k], writer, options);
            writer.join().join();
        }
        /* map<string, PDUI.PBFnExpression> body = 3; */
        for (let k of globalThis.Object.keys(message.body)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            PBFnExpression.internalBinaryWrite(message.body[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBFn
 */
export const PBFn = new PBFn$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBDebugPrint$Type extends MessageType<PBDebugPrint> {
    constructor() {
        super("PDUI.PBDebugPrint", [
            { no: 1, name: "expression", kind: "message", T: () => PBExpression }
        ]);
    }
    create(value?: PartialMessage<PBDebugPrint>): PBDebugPrint {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PBDebugPrint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBDebugPrint): PBDebugPrint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PDUI.PBExpression expression */ 1:
                    message.expression = PBExpression.internalBinaryRead(reader, reader.uint32(), options, message.expression);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBDebugPrint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PDUI.PBExpression expression = 1; */
        if (message.expression)
            PBExpression.internalBinaryWrite(message.expression, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBDebugPrint
 */
export const PBDebugPrint = new PBDebugPrint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBNavigation$Type extends MessageType<PBNavigation> {
    constructor() {
        super("PDUI.PBNavigation", [
            { no: 1, name: "expressionId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PBNavigation>): PBNavigation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.expressionId = "";
        if (value !== undefined)
            reflectionMergePartial<PBNavigation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBNavigation): PBNavigation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string expressionId */ 1:
                    message.expressionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBNavigation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string expressionId = 1; */
        if (message.expressionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.expressionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBNavigation
 */
export const PBNavigation = new PBNavigation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBPopNavigation$Type extends MessageType<PBPopNavigation> {
    constructor() {
        super("PDUI.PBPopNavigation", []);
    }
    create(value?: PartialMessage<PBPopNavigation>): PBPopNavigation {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PBPopNavigation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBPopNavigation): PBPopNavigation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBPopNavigation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBPopNavigation
 */
export const PBPopNavigation = new PBPopNavigation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBFnExpression$Type extends MessageType<PBFnExpression> {
    constructor() {
        super("PDUI.PBFnExpression", [
            { no: 1, name: "identity", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "genericFn", kind: "message", oneof: "payload", T: () => PBFn },
            { no: 3, name: "debugPrint", kind: "message", oneof: "payload", T: () => PBDebugPrint },
            { no: 4, name: "navigation", kind: "message", oneof: "payload", T: () => PBNavigation },
            { no: 5, name: "popNavigation", kind: "message", oneof: "payload", T: () => PBPopNavigation }
        ]);
    }
    create(value?: PartialMessage<PBFnExpression>): PBFnExpression {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.identity = "";
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PBFnExpression>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBFnExpression): PBFnExpression {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string identity */ 1:
                    message.identity = reader.string();
                    break;
                case /* PDUI.PBFn genericFn */ 2:
                    message.payload = {
                        oneofKind: "genericFn",
                        genericFn: PBFn.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).genericFn)
                    };
                    break;
                case /* PDUI.PBDebugPrint debugPrint */ 3:
                    message.payload = {
                        oneofKind: "debugPrint",
                        debugPrint: PBDebugPrint.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).debugPrint)
                    };
                    break;
                case /* PDUI.PBNavigation navigation */ 4:
                    message.payload = {
                        oneofKind: "navigation",
                        navigation: PBNavigation.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).navigation)
                    };
                    break;
                case /* PDUI.PBPopNavigation popNavigation */ 5:
                    message.payload = {
                        oneofKind: "popNavigation",
                        popNavigation: PBPopNavigation.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).popNavigation)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBFnExpression, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string identity = 1; */
        if (message.identity !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.identity);
        /* PDUI.PBFn genericFn = 2; */
        if (message.payload.oneofKind === "genericFn")
            PBFn.internalBinaryWrite(message.payload.genericFn, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PDUI.PBDebugPrint debugPrint = 3; */
        if (message.payload.oneofKind === "debugPrint")
            PBDebugPrint.internalBinaryWrite(message.payload.debugPrint, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PDUI.PBNavigation navigation = 4; */
        if (message.payload.oneofKind === "navigation")
            PBNavigation.internalBinaryWrite(message.payload.navigation, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PDUI.PBPopNavigation popNavigation = 5; */
        if (message.payload.oneofKind === "popNavigation")
            PBPopNavigation.internalBinaryWrite(message.payload.popNavigation, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBFnExpression
 */
export const PBFnExpression = new PBFnExpression$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBExpression$Type extends MessageType<PBExpression> {
    constructor() {
        super("PDUI.PBExpression", [
            { no: 1, name: "key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "identity", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rawString", kind: "scalar", oneof: "payload", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "scaffold", kind: "message", oneof: "payload", T: () => PBScaffold },
            { no: 5, name: "center", kind: "message", oneof: "payload", T: () => PBCenter },
            { no: 6, name: "text", kind: "message", oneof: "payload", T: () => PBText },
            { no: 7, name: "appBar", kind: "message", oneof: "payload", T: () => PBAppBar },
            { no: 8, name: "column", kind: "message", oneof: "payload", T: () => PBColumn },
            { no: 9, name: "elevatedButton", kind: "message", oneof: "payload", T: () => PBElevatedButton }
        ]);
    }
    create(value?: PartialMessage<PBExpression>): PBExpression {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.identity = "";
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PBExpression>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBExpression): PBExpression {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string identity */ 2:
                    message.identity = reader.string();
                    break;
                case /* string rawString */ 3:
                    message.payload = {
                        oneofKind: "rawString",
                        rawString: reader.string()
                    };
                    break;
                case /* PDUI.PBScaffold scaffold */ 4:
                    message.payload = {
                        oneofKind: "scaffold",
                        scaffold: PBScaffold.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).scaffold)
                    };
                    break;
                case /* PDUI.PBCenter center */ 5:
                    message.payload = {
                        oneofKind: "center",
                        center: PBCenter.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).center)
                    };
                    break;
                case /* PDUI.PBText text */ 6:
                    message.payload = {
                        oneofKind: "text",
                        text: PBText.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).text)
                    };
                    break;
                case /* PDUI.PBAppBar appBar */ 7:
                    message.payload = {
                        oneofKind: "appBar",
                        appBar: PBAppBar.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).appBar)
                    };
                    break;
                case /* PDUI.PBColumn column */ 8:
                    message.payload = {
                        oneofKind: "column",
                        column: PBColumn.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).column)
                    };
                    break;
                case /* PDUI.PBElevatedButton elevatedButton */ 9:
                    message.payload = {
                        oneofKind: "elevatedButton",
                        elevatedButton: PBElevatedButton.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).elevatedButton)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBExpression, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string key = 1; */
        if (message.key !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string identity = 2; */
        if (message.identity !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.identity);
        /* string rawString = 3; */
        if (message.payload.oneofKind === "rawString")
            writer.tag(3, WireType.LengthDelimited).string(message.payload.rawString);
        /* PDUI.PBScaffold scaffold = 4; */
        if (message.payload.oneofKind === "scaffold")
            PBScaffold.internalBinaryWrite(message.payload.scaffold, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PDUI.PBCenter center = 5; */
        if (message.payload.oneofKind === "center")
            PBCenter.internalBinaryWrite(message.payload.center, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PDUI.PBText text = 6; */
        if (message.payload.oneofKind === "text")
            PBText.internalBinaryWrite(message.payload.text, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* PDUI.PBAppBar appBar = 7; */
        if (message.payload.oneofKind === "appBar")
            PBAppBar.internalBinaryWrite(message.payload.appBar, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* PDUI.PBColumn column = 8; */
        if (message.payload.oneofKind === "column")
            PBColumn.internalBinaryWrite(message.payload.column, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* PDUI.PBElevatedButton elevatedButton = 9; */
        if (message.payload.oneofKind === "elevatedButton")
            PBElevatedButton.internalBinaryWrite(message.payload.elevatedButton, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PDUI.PBExpression
 */
export const PBExpression = new PBExpression$Type();
